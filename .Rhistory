igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(topic_graph, mass = .5, k=.2)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=spring()
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(k=.2)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(topic_graph,k=.2)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(topic_graph, mass=.2)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(topic_graph, mass=.1)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.spring(topic_graph, mass=1)
#layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
######### MODEL VALIDATOR SCRIPT ###########
#
#
# Runs several LDA models & compares outcome
# and compare their predictive validity on
# meta-data labels
#
############################################
library(corpustools)
library("MASS")
library("car")
library("parallel")
library(ggplot2)
source("mclapply.hack.R")
source("adjacency_functions.R")
source("backbone.r")
## Load files
tokens <- read.csv("ica_tokens.csv")
meta   <- read.csv("ica_meta.csv")
## subset corpus
adjs  <- c("JJ","JJS","JJR")
nouns <- c("NN","NNP","NNPS","NN")
## Run Topic models
models <- list()
### adj based
make_full_meta <- function(tokens,meta, alpha)
{
adj_tokens        <- tokens
adj_dtm           <- dtm.create(documents = adj_tokens$aid, terms=adj_tokens$lemma )
adj_termstats     <- term.statistics(adj_dtm)
adj_filter        <- adj_termstats[adj_termstats$docfreq >- 5 & adj_termstats$number==F, ]
adj_filtered      <- adj_dtm[,adj_filter$term]
adj_model         <- lda.fit(adj_filtered , K = 50, num.iterations = 1000, alpha=alpha)
meta2             <- meta[match(adj_model@documents,meta$id),]
assignment        <- data.frame(i=adj_model@wordassignments$i, j=adj_model@wordassignments$j, v=adj_model@wordassignments$v)
docsums           <- acast(assignment, i ~ v, value.var='j', fun.aggregate=length)
colnames(docsums) <- paste("Topic_",1:50, sep="")
full_meta         <- cbind(meta2,docsums)
list(meta=full_meta, model=adj_model)
}
label_test <- function(test_label, dataset, label_column)
{
d <- dataset
d$div <-as.numeric(d[[label_column]]==test_label)
mod   <- glm.nb( paste("div~" ,paste("Topic_",1:50,collapse="+",sep="")),d)
umod  <- step(mod)
norm_coefs <- coef(mod)
norm_coefs[summary(mod)$coef[,4]>0.05] <- 0
best_coefs <- norm_coefs
best_coefs[!rownames(best_coefs) %in% names(coef(umod)) | summary(umod)$coef[,4]>.05] <- 0
results <- list(
best_coefs = best_coefs,
best_bic   = BIC(umod),
norm_coefs = norm_coefs,
norm_bic   = BIC(mod)
)
}
analyse_labels <- function(dataset, label_column)
{
res <- mclapply(unique(dataset[[label_column]]), label_test, label_column=label_column, dataset=dataset)
norm_mat = cbind(sapply(res,getElement,"norm_coefs"))
colnames(norm_mat) <- unique(dataset[[label_column]])
best_mat = cbind(sapply(res,getElement,"best_coefs"))
colnames(best_mat) <- unique(dataset[[label_column]])
bics <- cbind(sapply(res, getElement, "norm_bic"))
bics <- cbind(bics, cbind(sapply(res, getElement, "best_bic")) )
rownames(bics) <- unique(dataset[[label_column]])
colnames(bics) <- c("normal","updated")
list(best=best_mat,norm=norm_mat, bics = bics)
}
get_bics <- function(analyse_labels_result)
{
m <- cbind(sapply(analyse_labels_result,"best_bic"))
}
plot_matrix <- function(dataset,label)
{
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value>0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="steelblue",low="transparent")+
scale_x_discrete(labels = c("int",paste(1:50)))
}
by_topic <- function(tokens, meta, model, topic_nr)
{
# subset meta ids
mids <- meta$id[meta[[paste("Topic_",topic_nr,sep="")]]>0]
topic_tokens <- tokens[tokens$aid %in% mids & tokens$lemma %in% terms(model,100)[,topic_nr],]
# create dtm for topic
topic_dtm   <- dtm.create(documents = topic_tokens$aid, terms=topic_tokens$lemma )
# create graph
topic_graph <- cooccurenceNetwork(topic_dtm, measure = "conprob")
# apply backbone filtering
bb <- backbone(topic_graph)
topic_graph <- delete.edges(topic_graph,c(1:length(bb))[bb>0.025])
topic_graph <- delete.vertices(topic_graph, c(1:length(V(topic_graph)))[degree(topic_graph)<1])
# plot network
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
}
# make topic models at three alpha levels
fm_05 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=.05)
fm_10 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=.10)
fm_15 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=.15)
# analyse
fma_05 <- analyse_labels(fm_05$meta, "division")
fma_10 <- analyse_labels(fm_10$meta, "division")
fma_15 <- analyse_labels(fm_15$meta, "division")
fma_05$bics
best_bics <- data.frame(k.05=fma_05$bics[2],k.1=fma_10$bics[2],k.15=fma_15$bics[2])
ggplot(melt(best_bics),aes(x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=value,x=1))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=1,x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=valu,x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=value,x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(y=value,x=value))+geom_boxplot()
ggplot(melt(best_bics),aes(y=value,x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=value,id=rownames))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=value,id=rownames(value)))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=value,id=rownames(value),y=1))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=variable,y=value)+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=variable,y=value)+geom_boxplot()+facet_grid(~variable))
ggplot(melt(best_bics),aes(x=variable,y=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot()+facet_grid(~variable)
sapply(best_bics,mean)
summary(best_bics)
best_bics
best_bics <- data.frame(k.05=fma_05$bics[,2],k.1=fma_10$bics[,2],k.15=fma_15$bics[,2])
best_bics
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot()+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(colour="steelblue",alpha=.8)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ylab("Model BIC boxplot")
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
fmelter <- function(x,y){ m<- melt(x); m$model <- y; return(M)}
fmelter <- function(x,y){ m<- melt(x$best); m$model <- y; return(M)}
melted_models <- rbind(fmelter(fma_05, "K=.05"),fmelter(fma_10, "K=.10"),fmelter(fma_15, "K=.15"))
fmelter <- function(x,y){ m<- melt(x$best); m$model <- y; return(m)}
melted_models <- rbind(fmelter(fma_05, "K=.05"),fmelter(fma_10, "K=.10"),fmelter(fma_15, "K=.15"))
ggplot(melted_models,aes(x=Var1,y=Var2,fill=value))+geom_tile()+facet_grid(~model)
fma_05$best
fm05[[label_column]]
unique(fm_05$division)
unique(fm_05$divisions)
unique(fm_05$meta$divisions)
unique(fm_05@meta$divisions)
fm_05$meta
fm_05$meta$division
unique(fm_05$meta$division)
colnames(fma_05$best)<-unique(fm_05$meta$division)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=value))+geom_tile()+facet_grid(~model)
melted_models <- rbind(fmelter(fma_05, "K=.05"),fmelter(fma_10, "K=.10"),fmelter(fma_15, "K=.15"))
ggplot(melted_models,aes(x=Var1,y=Var2,fill=value))+geom_tile()+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0)))+geom_tile()+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0)))+geom_tile(high="steelblue",low="white")+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0)))+geom_tile()+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0)))+geom_tile()+scale_fill_gradient(high="steelblue",low="white",alpha=.7)+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.7))+geom_tile()+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)scale_x_discrete(labels = c("int",paste(1:50)))
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend=NULL)
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
head(melted_models)
head(melted_models[ordered(melted_models$value)])
head(melted_models[ordered(melted_models$value),])
head(melted_models[ordered(melted_models$value, reverse=True),])
head(melted_models[ordered(melted_models$value, reverse=T),])
head(melted_models[ordered(melted_models$value, reversed=T),])
head(melted_models[ordered(melted_models$value),])
head(melted_models[ordered(melted_models$value,melted_models$Var2),])
head(melted_models[ordered(melted_models$value),])
ggplot(melted_models[ordered(melted_models$value)],aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
ggplot(melted_models[ordered(melted_models$value),],aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
ggplot(melted_models[order(melted_models$value,decreasing = T
ggplot(melted_models[order(melted_models$value,decreasing=T),],aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
lapply(fma_05$best,1,function(x){sum(x>0)})
apply(fma_05$best,1,function(x){sum(x>0)})
crossload_count <- function(x) apply(z,1,function(x){sum(x>0)})
best_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.15=crossload_count(fma_15$best),k.15=crossload_count(fma_15$best))
crossload_count <- function(z) apply(z,1,function(x){sum(x>0)})
best_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.15=crossload_count(fma_15$best),k.15=crossload_count(fma_15$best))
ggplot(melt(crossload_count),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_crossloads),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
best_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.10=crossload_count(fma_10$best),k.15=crossload_count(fma_15$best))
ggplot(melt(best_crossloads),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
summary(best_crossloads)
ggplot(melt(best_crossloads),aes(x=1,y=value))+geom_hist(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_crossloads),aes(x=1,y=value))+geom_bar(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_crossloads),aes(x=value,y=value))+geom_bar(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_crossloads),aes(x=value))+geom_bar(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_crossloads),aes(x=value,colour=model))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,colour=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,group=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,group=variable,id=1))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(fill="steelblue",alpha=.8)
names(melt(best_crossloads))
ggplot(melt(best_crossloads),aes(x=value,colour=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,colour=variable, fill=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,colour=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(fill="steelblue",alpha=.8)+position_dodge()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(fill="steelblue",alpha=.8)+position_dodge(~variable)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(fill="steelblue",alpha=.8)+position_dodge(~variable)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value))+geom_histogram(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable,id=rownames(value)))+geom_histogram(fill="steelblue",alpha=.8)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()+position_dodge()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()+position_dodge()
dev.off()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()+position_dodge()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar()
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_bar(position="dodge")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(position="dodge")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(position="dodge",binwidth=1)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(position="dodge",binwidth=.9)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_density(position="dodge",binwidth=.9)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_density(alpha=.7)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_density(alpha=.5)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_density(alpha=.5)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge")+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",bindwidth=.5)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",bindwidth=.1)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.1)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.5)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.9)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.8)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.8)+xlab("number of overlapping topics")+ylab("")+theme(element_text(size=5))
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.8)+xlab("number of overlapping topics")+ylab("")+theme(element_text(size = 2))
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.8)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 2))
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=.8)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
######### MODEL VALIDATOR SCRIPT ###########
#
#
# Runs several LDA models & compares outcome
# and compare their predictive validity on
# meta-data labels
#
############################################
library(corpustools)
library("MASS")
library("car")
library("parallel")
library(ggplot2)
source("mclapply.hack.R")
source("adjacency_functions.R")
source("backbone.r")
## Load files
tokens <- read.csv("ica_tokens.csv")
meta   <- read.csv("ica_meta.csv")
## subset corpus
adjs  <- c("JJ","JJS","JJR")
nouns <- c("NN","NNP","NNPS","NN")
## Run Topic models
models <- list()
### adj based
make_full_meta <- function(tokens,meta, alpha)
{
adj_tokens        <- tokens
adj_dtm           <- dtm.create(documents = adj_tokens$aid, terms=adj_tokens$lemma )
adj_termstats     <- term.statistics(adj_dtm)
adj_filter        <- adj_termstats[adj_termstats$docfreq >- 5 & adj_termstats$number==F, ]
adj_filtered      <- adj_dtm[,adj_filter$term]
adj_model         <- lda.fit(adj_filtered , K = 50, num.iterations = 1000, alpha=alpha)
meta2             <- meta[match(adj_model@documents,meta$id),]
assignment        <- data.frame(i=adj_model@wordassignments$i, j=adj_model@wordassignments$j, v=adj_model@wordassignments$v)
docsums           <- acast(assignment, i ~ v, value.var='j', fun.aggregate=length)
colnames(docsums) <- paste("Topic_",1:50, sep="")
full_meta         <- cbind(meta2,docsums)
list(meta=full_meta, model=adj_model)
}
label_test <- function(test_label, dataset, label_column)
{
d <- dataset
d$div <-as.numeric(d[[label_column]]==test_label)
mod   <- glm.nb( paste("div~" ,paste("Topic_",1:50,collapse="+",sep="")),d)
umod  <- step(mod)
norm_coefs <- coef(mod)
norm_coefs[summary(mod)$coef[,4]>0.05] <- 0
best_coefs <- norm_coefs
best_coefs[!rownames(best_coefs) %in% names(coef(umod)) | summary(umod)$coef[,4]>.05] <- 0
results <- list(
best_coefs = best_coefs,
best_bic   = BIC(umod),
norm_coefs = norm_coefs,
norm_bic   = BIC(mod)
)
}
analyse_labels <- function(dataset, label_column)
{
res <- mclapply(unique(dataset[[label_column]]), label_test, label_column=label_column, dataset=dataset)
norm_mat = cbind(sapply(res,getElement,"norm_coefs"))
colnames(norm_mat) <- unique(dataset[[label_column]])
best_mat = cbind(sapply(res,getElement,"best_coefs"))
colnames(best_mat) <- unique(dataset[[label_column]])
bics <- cbind(sapply(res, getElement, "norm_bic"))
bics <- cbind(bics, cbind(sapply(res, getElement, "best_bic")) )
rownames(bics) <- unique(dataset[[label_column]])
colnames(bics) <- c("normal","updated")
list(best=best_mat,norm=norm_mat, bics = bics)
}
get_bics <- function(analyse_labels_result)
{
m <- cbind(sapply(analyse_labels_result,"best_bic"))
}
plot_matrix <- function(dataset,label)
{
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value>0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="steelblue",low="transparent")+
scale_x_discrete(labels = c("int",paste(1:50)))
}
by_topic <- function(tokens, meta, model, topic_nr)
{
# subset meta ids
mids <- meta$id[meta[[paste("Topic_",topic_nr,sep="")]]>0]
topic_tokens <- tokens[tokens$aid %in% mids & tokens$lemma %in% terms(model,100)[,topic_nr],]
# create dtm for topic
topic_dtm   <- dtm.create(documents = topic_tokens$aid, terms=topic_tokens$lemma )
# create graph
topic_graph <- cooccurenceNetwork(topic_dtm, measure = "conprob")
# apply backbone filtering
bb <- backbone(topic_graph)
topic_graph <- delete.edges(topic_graph,c(1:length(bb))[bb>0.025])
topic_graph <- delete.vertices(topic_graph, c(1:length(V(topic_graph)))[degree(topic_graph)<1])
# plot network
igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode="in"), vertex.label.cex=.7*log(degree(topic_graph)),
vertex.label.color="Black", vertex.color="steelblue", vertex.frame.color=NA,
edge.arrow.size=.5*E(topic_graph)$weight,
layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)
)
}
# make topic models at three alpha levels
fm_05 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=.5)
fm_10 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=1)
fm_15 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=1.5)
# analyse
fma_05 <- analyse_labels(fm_05$meta, "division")
fma_10 <- analyse_labels(fm_10$meta, "division")
fma_15 <- analyse_labels(fm_15$meta, "division")
best_bics <- data.frame(k.05=fma_05$bics[,2],k.1=fma_10$bics[,2],k.15=fma_15$bics[,2])
crossload_count <- function(z) apply(z,1,function(x){sum(x>0)})
best_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.10=crossload_count(fma_10$best),k.15=crossload_count(fma_15$best))
fmelter <- function(x,y){ m<- melt(x$best); m$model <- y; return(m)}
melted_models <- rbind(fmelter(fma_05, "K=.05"),fmelter(fma_10, "K=.10"),fmelter(fma_15, "K=.15"))
# plot
## BIC boxplots
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
## Term overlap histograms
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
##
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
plot_matrix(fma_15,"best")
plot_matrix(fma_15,"best")
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
melted_models <- rbind(fmelter(fma_05, "K=0.5"),fmelter(fma_10, "K=1.0"),fmelter(fma_15, "K=1.5"))
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
## Term overlap histograms
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
##
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
best_bics <- data.frame(k0.5=fma_05$bics[,2],k1.0=fma_10$bics[,2],k1.5=fma_15$bics[,2])
crossload_count <- function(z) apply(z,1,function(x){sum(x>0)})
best_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.10=crossload_count(fma_10$best),k.15=crossload_count(fma_15$best))
fmelter <- function(x,y){ m<- melt(x$best); m$model <- y; return(m)}
melted_models <- rbind(fmelter(fma_05, "K=0.5"),fmelter(fma_10, "K=1.0"),fmelter(fma_15, "K=1.5"))
ggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill="steelblue",alpha=.8)+facet_grid(~variable)+xlab("Models")+ggtitle("Model BIC boxplot")+ylab("BIC")
ggplot(melt(best_bics), aes(y=value, fill=variable))+stat_summary(fun.y="mean",geom="bar")
ggplot(melt(best_bics), aes(x=1,y=value, fill=variable))+stat_summary(fun.y="mean",geom="bar")
ggplot(melt(best_bics), aes(x=variable,y=value, fill=variable))+stat_summary(fun.y="mean",geom="bar")
ggplot(melt(best_bics), aes(x=values, fill=variable))+geom_density()
ggplot(melt(best_bics), aes(x=value, fill=variable))+geom_density()
ggplot(melt(best_bics), aes(x=value, fill=variable))+geom_density(alpa=.6)
ggplot(melt(best_bics), aes(x=value, fill=variable))+geom_density(alpha=.6)
ggplot(melt(best_bics), aes(x=value, fill=variable))+geom_density(alpha=.3)
ggplot(melt(best_bics), aes(x=value, fill=variable, colour=variable))+geom_density(alpha=.3)
ggplot(melt(best_bics),aes(y=value,fill=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar")
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar")+gacet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar")+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar")+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar",alpha=.7,size=2)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar",alpha=.7,size=.5)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point")+stat_summary(fun.data=mean_cl_normal,geom="errorbar",alpha=.7,size=1.5)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point",size=3)+stat_summary(fun.data=mean_cl_normal,geom="errorbar",alpha=.7,size=1.5)+facet_grid(~variable)
ggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y="mean",geom="point",size=5)+stat_summary(fun.data=mean_cl_normal,geom="errorbar",alpha=.7,size=1.5)+facet_grid(~variable)
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
ggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c("int",paste(1:50)))+scale_fill_gradient(high="steelblue",low="white")+facet_grid(~model)+theme(legend.position="none")
ggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position="dodge",binwidth=1)+xlab("number of overlapping topics")+ylab("")+theme(legend.text=element_text(size = 20))
fm_05$model$loglik
names(fm_05$model)
fm_05$model@logLiks
fm_05$model@loglikelihood
fm_10$model@loglikelihood
fm_15$model@loglikelihood
plot_matrix(fma_10,"best")
by_topic(tokens, fm_10$meta, fm_10$model, 1)
by_topic(tokens, fm_10$meta, fm_10$model, 17) # unique
by_topic(tokens, fm_10$meta, fm_10$model, 42) # unique
by_topic(tokens, fm_10$meta, fm_10$model, 8) # unique
plot_matrix <- function(dataset,label,type="pos")
{
if (type=="pos"){
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value>0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="steelblue",low="transparent")+
scale_x_discrete(labels = c("int",paste(1:50)))
} else
{
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value<0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="transparant",low="red")+
scale_x_discrete(labels = c("int",paste(1:50)))
}
}
plot_matrix(fma_10,"best")
plot_matrix(fma_10,"neg")
plot_matrix(fma_10,"best","neg")
plot_matrix <- function(dataset,label,type="pos")
{
if (type=="pos"){
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value>0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="steelblue",low="transparent")+
scale_x_discrete(labels = c("int",paste(1:50)))
} else
{
ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value<0,value,0)))+
geom_tile(alpha=.7)+
scale_fill_gradient(high="transparent",low="red")+
scale_x_discrete(labels = c("int",paste(1:50)))
}
}
plot_matrix(fma_10,"best","neg")
by_topic(tokens, fm_10$meta, fm_10$model, 10) # unique
by_topic(tokens, fm_10$meta, fm_10$model, 18) # unique
length(unique(meta$id))
length(unique(meta$division))
cprob <- function(dataset, x, y){dataset[[x]]*dataset[[y]]/sum(dataset[[x]])+sum(dataset[[y]])}
conprobs <- outer(unique(fm_10$division),paste("Topic_",1:50,sep=""),cprob)
conprobs
conprobs <- outer(unique(fm_10$division),paste("Topic_",1:50,sep=""),cprob, dataset)
conprobs
unique(fm_10$meta@division)
unique(fm_10$meta$division)
conprobs <- outer(unique(fm_10$meta$division),paste("Topic_",1:50,sep=""),cprob, dataset=fm_10$meta)
paste("Topic_",1:50,sep="")
cprob <- function(x, y){dataset[[x]]*dataset[[y]]/sum(dataset[[x]])+sum(dataset[[y]])}
dataset <- fm_10$meta
conprobs <- outer(unique(fm_10$meta$division),paste("Topic_",1:50,sep=""),cprob, dataset=fm_10$meta)
conprobs
conprobs <- outer(unique(fm_10$meta$division),paste("Topic_",1:50,sep=""),cprob)
outer
