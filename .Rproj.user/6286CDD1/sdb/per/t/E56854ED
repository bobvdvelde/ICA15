{
    "contents" : "######### MODEL VALIDATOR SCRIPT ###########\n#\n#\n# Runs several LDA models & compares outcome\n# and compare their predictive validity on \n# meta-data labels \n#\n############################################\n\nlibrary(corpustools)\nlibrary(\"MASS\")\nlibrary(\"car\")\nlibrary(\"parallel\")\nlibrary(ggplot2)\nsource(\"mclapply.hack.R\")\nsource(\"adjacency_functions.R\")\nsource(\"backbone.r\")\n## Load files\n\ntokens <- read.csv(\"ica_tokens.csv\")\nmeta   <- read.csv(\"ica_meta.csv\")\n\n## subset corpus\n\nadjs  <- c(\"JJ\",\"JJS\",\"JJR\")\nnouns <- c(\"NN\",\"NNP\",\"NNPS\",\"NN\")\n\n## Run Topic models\nmodels <- list()\n\n### adj based\nmake_full_meta <- function(tokens,meta, alpha)\n  {\n  adj_tokens        <- tokens\n  adj_dtm           <- dtm.create(documents = adj_tokens$aid, terms=adj_tokens$lemma )\n  adj_termstats     <- term.statistics(adj_dtm)\n  adj_filter        <- adj_termstats[adj_termstats$docfreq >- 5 & adj_termstats$number==F, ]\n  adj_filtered      <- adj_dtm[,adj_filter$term]\n  adj_model         <- lda.fit(adj_filtered , K = 50, num.iterations = 1000, alpha=alpha)\n  meta2             <- meta[match(adj_model@documents,meta$id),]\n  assignment        <- data.frame(i=adj_model@wordassignments$i, j=adj_model@wordassignments$j, v=adj_model@wordassignments$v)\n  docsums           <- acast(assignment, i ~ v, value.var='j', fun.aggregate=length) \n  colnames(docsums) <- paste(\"Topic_\",1:50, sep=\"\")\n  full_meta         <- cbind(meta2,docsums)\n  list(meta=full_meta, model=adj_model)\n}\n\nlabel_test <- function(test_label, dataset, label_column)\n{\n  d <- dataset\n  d$div <-as.numeric(d[[label_column]]==test_label)\n  mod   <- glm.nb( paste(\"div~\" ,paste(\"Topic_\",1:50,collapse=\"+\",sep=\"\")),d)\n  umod  <- step(mod)\n  \n  norm_coefs <- coef(mod)\n  norm_coefs[summary(mod)$coef[,4]>0.05] <- 0\n  best_coefs <- norm_coefs\n  best_coefs[!rownames(best_coefs) %in% names(coef(umod)) | summary(umod)$coef[,4]>.05] <- 0\n  \n  results <- list(\n    best_coefs = best_coefs,\n    best_bic   = BIC(umod),\n    norm_coefs = norm_coefs,\n    norm_bic   = BIC(mod)\n    )\n  \n}\n\nanalyse_labels <- function(dataset, label_column)\n{\n  res <- mclapply(unique(dataset[[label_column]]), label_test, label_column=label_column, dataset=dataset)\n  norm_mat = cbind(sapply(res,getElement,\"norm_coefs\"))\n  colnames(norm_mat) <- unique(dataset[[label_column]])\n  best_mat = cbind(sapply(res,getElement,\"best_coefs\"))\n  colnames(best_mat) <- unique(dataset[[label_column]])\n  bics <- cbind(sapply(res, getElement, \"norm_bic\"))\n  bics <- cbind(bics, cbind(sapply(res, getElement, \"best_bic\")) )\n  rownames(bics) <- unique(dataset[[label_column]])\n  colnames(bics) <- c(\"normal\",\"updated\")\n  list(best=best_mat,norm=norm_mat, bics = bics)\n  \n}\n\nget_bics <- function(analyse_labels_result)\n{\n  m <- cbind(sapply(analyse_labels_result,\"best_bic\"))\n  \n}\n\nplot_matrix <- function(dataset,label,type=\"pos\")\n{\n  if (type==\"pos\"){\n    ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value>0,value,0)))+\n    geom_tile(alpha=.7)+\n    scale_fill_gradient(high=\"steelblue\",low=\"transparent\")+\n    scale_x_discrete(labels = c(\"int\",paste(1:50)))\n  } else\n  {\n    ggplot(melt(dataset[[label]]),aes(Var1,Var2,fill=ifelse(value<0,value,0)))+\n      geom_tile(alpha=.7)+\n      scale_fill_gradient(high=\"transparent\",low=\"red\")+\n      scale_x_discrete(labels = c(\"int\",paste(1:50)))\n  }\n}\n\nby_topic <- function(tokens, meta, model, topic_nr)\n{\n  # subset meta ids\n  mids <- meta$id[meta[[paste(\"Topic_\",topic_nr,sep=\"\")]]>0]\n  topic_tokens <- tokens[tokens$aid %in% mids & tokens$lemma %in% terms(model,100)[,topic_nr],]\n  \n  # create dtm for topic\n  topic_dtm   <- dtm.create(documents = topic_tokens$aid, terms=topic_tokens$lemma )\n  \n  # create graph\n  topic_graph <- cooccurenceNetwork(topic_dtm, measure = \"conprob\")\n  \n  # apply backbone filtering\n  bb <- backbone(topic_graph)\n  topic_graph <- delete.edges(topic_graph,c(1:length(bb))[bb>0.025])\n  topic_graph <- delete.vertices(topic_graph, c(1:length(V(topic_graph)))[degree(topic_graph)<1])\n  \n  # plot network\n  igraph::plot.igraph(topic_graph, vertex.size=1+degree(topic_graph, mode=\"in\"), vertex.label.cex=.7*log(degree(topic_graph)),\n                      vertex.label.color=\"Black\", vertex.color=\"steelblue\", vertex.frame.color=NA,\n                      edge.arrow.size=.5*E(topic_graph)$weight,\n                      layout=layout.fruchterman.reingold(topic_graph, weights=E(topic_graph)$weight/4)\n                      )\n  \n}\n\n# make topic models at three alpha levels\nfm_05 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=.5)\nfm_10 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=1)\nfm_15 <- make_full_meta(tokens[tokens$pos %in% nouns, ], meta, alpha=1.5)\n\n# analyse \nfma_05 <- analyse_labels(fm_05$meta, \"division\")\nfma_10 <- analyse_labels(fm_10$meta, \"division\")\nfma_15 <- analyse_labels(fm_15$meta, \"division\")\n\nbest_bics <- data.frame(k0.5=fma_05$bics[,2],k1.0=fma_10$bics[,2],k1.5=fma_15$bics[,2])\ncrossload_count <- function(z) apply(z,1,function(x){sum(x>0)})\nbest_crossloads <- data.frame(k.05=crossload_count(fma_05$best),k.10=crossload_count(fma_10$best),k.15=crossload_count(fma_15$best))\nfmelter <- function(x,y){ m<- melt(x$best); m$model <- y; return(m)}\nmelted_models <- rbind(fmelter(fma_05, \"K=0.5\"),fmelter(fma_10, \"K=1.0\"),fmelter(fma_15, \"K=1.5\"))\n\n# plot \n## BIC boxplots\nggplot(melt(best_bics),aes(x=1,y=value))+geom_boxplot(fill=\"steelblue\",alpha=.8)+facet_grid(~variable)+xlab(\"Models\")+ggtitle(\"Model BIC boxplot\")+ylab(\"BIC\")\n## BIC whiskerplot\nggplot(melt(best_bics),aes(x=1,y=value,fill=variable, colour=variable))+stat_summary(fun.y=\"mean\",geom=\"point\")+stat_summary(fun.data=mean_cl_normal,geom=\"errorbar\",alpha=.7,size=.5)+facet_grid(~variable)\n## Term overlap histograms\nggplot(melt(best_crossloads),aes(x=value,fill=variable))+geom_histogram(alpha=.5,position=\"dodge\",binwidth=1)+xlab(\"number of overlapping topics\")+ylab(\"\")+theme(legend.text=element_text(size = 20))\n## Full overview\nggplot(melted_models,aes(x=Var1,y=Var2,fill=ifelse(value>0,value,0),alpha=.8))+geom_tile()+scale_x_discrete(labels = c(\"int\",paste(1:50)))+scale_fill_gradient(high=\"steelblue\",low=\"white\")+facet_grid(~model)+theme(legend.position=\"none\")\n\nplot_matrix(fma_10,\"best\")\n\n# graph \nby_topic(tokens, fm_10$meta, fm_10$model, 17) # unique\nby_topic(tokens, fm_10$meta, fm_10$model, 1) # shared\n\ncprob <- function(dataset, x, y){dataset[[x]]*dataset[[y]]/sum(dataset[[x]])+sum(dataset[[y]])}",
    "created" : 1431604475892.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4246087330",
    "id" : "E56854ED",
    "lastKnownWriteTime" : 1432598981,
    "path" : "C:/Users/Bob/Dropbox/ICA15/R_LDA_validator.R",
    "project_path" : "R_LDA_validator.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}