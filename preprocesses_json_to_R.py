'''
 ICA PREPROCESS SCRIPT
 
 This script preprocesses the json file generated by the ica_scrapper for
 analysis in R. 
 
 Requires numpy and nltk treebank libraries
 
'''

import json
import csv
import nltk
import codecs

papers = json.load(codecs.open("ica_papers_2015.json", encoding="utf=8"))

lemmatizer = nltk.WordNetLemmatizer()

processed_papers = list()

token_file	= "ica_tokens.csv"
meta_file  	= "ica_meta.csv"

def purge(text):
	''' Function to purge non-encodable characters from unicode-strings
	   e.g. purge(u"heyu\2091") -> u"hey"
	'''
	assert type(text) == unicode
	cleanstring = []
	for char in text:
		try: cleanstring.append(codecs.encode(char))
		except: pass
	return u''.join(cleanstring)
	
	
total_papers = float(len(papers))
with codecs.open(token_file, mode="w",encoding="utf-8", errors = "ignore") as token_f:
	with codecs.open(meta_file, mode="w",encoding="utf-8", errors = "ignore") as meta_f:
		token_writer 	= csv.DictWriter(token_f, 	["word","lemma","aid","sentence","pos","id","freq"])
		meta_writer	= csv.DictWriter(meta_f, 	["authors","title","id","division", "universities"] )
		
		token_writer.writeheader()
		meta_writer.writeheader()
		for paper_number, paper in enumerate(papers):
			"Loop over papers and process each, making a files consistent with the sotu data in R"
			if not paper_number % 10 or paper_number == 1 :  print "at %s : %.2f %%" %(paper_number, paper_number*100 / total_papers)
			processed_paper = dict()
			
			lines = nltk.pos_tag_sents([ abstract.split() for abstract in nltk.sent_tokenize(paper['paper_abstract'])])
			
			# Create long-format representation of paper
			
			processed_paper["tokens"] = list()
			for line_number, line in enumerate(lines):
				for word_number, tag in enumerate(line):
					token_writer.writerow(dict(
					word    		= purge(tag[0]),
					lemma 		= purge(lemmatizer.lemmatize(tag[0])),
					aid          	= paper_number,
					sentence	= line_number,
					pos 			= tag[1],
					id 			= word_number,
					freq 			= 1
					))
	
			# Create meta-data (wide-format) representation of paper
			meta_writer.writerow(dict(
				authors     = purge(';'.join(["%s, %s" %(a['name'],a['firstname']) for a in paper['paper_authors']])),
				title           = purge(paper['paper_title']),
				id              = paper_number,
				division      = purge(paper['division']),
				universities = purge(';'.join(["%s" %(a['university'].replace("University","U")) for a in paper['paper_authors']]))
			))

